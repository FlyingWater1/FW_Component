apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        applicationId "com.feishuixiansheng.fw_component"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    def modules = rootProject.modules

    def isUiStandalone = modules.ui.isStandalone
    def isFrameworkStandalone = modules.framework.isStandalone
    def isUserStandalone = modules.user.isStandalone
    // 判断业务组件是否独立运行，实现业务组件的灵活依赖
    if (isUiStandalone && isFrameworkStandalone && isUserStandalone) {
//        api project(':common')':module_ui', ':module_framework', ':module_user'
    } else {
        if (!isUiStandalone) {
            implementation project(':module_ui')
        }
        if (!isFrameworkStandalone) {
            implementation project(':module_framework')
        }
        if (!isUserStandalone) {
            implementation project(':module_user')
        }
    }

}
